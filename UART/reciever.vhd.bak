
--
library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
 
entity reciever is
  generic (
    baud : integer := 16     -- 5000000/(19200*16)
    );
  port (
    clk       : in  std_logic;
    RX_Serial : in  std_logic;
    RX_DV     : out std_logic;
    RX_Byte   : out std_logic_vector(7 downto 0)
    );
end reciever;
 
 
architecture behaviour of reciever is
 
  type state is (Idle, Start, Read_Byte, Stop, Cleanup);
  signal estado : state := Idle;
 
  signal RX_Data_Redundant : std_logic := '0';
  signal RX_Data           : std_logic := '0';
   
  signal Count : integer range 0 to baud-1 := 0;
  signal Index : integer range 0 to 7 := 0;  -- 8 Bits, tamanho da palavra
  signal Byte  : std_logic_vector(7 downto 0) := (others => '0');
  signal DV    : std_logic := '0';
   
begin
 
  -- Purpose: Double-register the incoming data.
  -- This allows it to be used in the UART RX Clock Domain.
  -- (It removes problems caused by metastabiliy)
  -- Pesquisar metaestabilidade
  p_SAMPLE : process (clk)
  begin
    if (clk'event and clk='1') then
      RX_Data_Redundant <= RX_Serial;
      RX_Data   <= RX_Data_Redundant; 
    end if; 
  end process p_SAMPLE;
 
  -- Purpose: Control RX state machine
  p_UART_RX : process (clk)
  begin
    if (clk'event and clk='1') then
      case estado is
        when Idle =>
          DV     <= '0';
          Count <= 0;
          Index <= 0;
 
          if RX_Data = '0' then       -- Start bit detected
            estado <= Start;
          else
            estado <= Idle;
          end if;
 
          -- Check middle of start bit to make sure it's still low
          when Start =>
          if Count = (baud-1)/2 then
            if RX_Data = '0' then
              Count <= 0;  -- reset counter since we found the middle
              estado   <= Read_Byte;
            else
              estado   <= Idle;
            end if;
          else
            Count <= Count + 1;
            estado   <= Start;
          end if;
         
        -- Wait baud-1 clock cycles to sample serial data
        when Read_Byte =>
          if Count < baud-1 then
            Count <= Count + 1;
            estado   <= Read_Byte;
          else
            Count            <= 0;
            Byte(Index) <= RX_Data;
             
            -- Check if we have sent out all bits
            if Index < 7 then
              Index <= Index + 1;
              estado   <= Read_Byte;
            else
              Index <= 0;
              estado   <= Stop;
            end if;
          end if;
           
        -- Receive Stop bit. Stop bit = 1
        when Stop =>
          -- Wait baud-1 clock cycles for Stop bit to finish
          if Count < baud-1 then
            Count <= Count + 1;
            estado   <= Stop;
          else
            DV     <= '1';
            Count <= 0;
            estado   <= Cleanup;
          end if;
            
        -- Stay here 1 clock
        when Cleanup =>
          estado <= Idle;
          DV   <= '0'; when others =>
          estado <= Idle;
 
      end case;
    end if;
  end process p_UART_RX;
 
  RX_DV   <= DV;
  RX_Byte <= Byte;
   
end behaviour;